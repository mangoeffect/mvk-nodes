--- /opt/cmake-3.12.0-Linux-x86_64/share/cmake-3.12/Modules/CheckCXXCompilerFlag.cmake	2018-07-17 20:29:59.000000000 +0900
+++ CheckCXXCompilerFlag.cmake	2018-11-15 21:40:16.442425885 +0900
@@ -32,13 +32,54 @@
   in such variables may cause a false negative for this check.
 #]=======================================================================]
 
 include_guard(GLOBAL)
 include(CheckCXXSourceCompiles)
 include(CMakeCheckCompilerFlagCommonPatterns)
 
 macro (CHECK_CXX_COMPILER_FLAG _FLAG _RESULT)
    set(SAFE_CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS}")
    set(CMAKE_REQUIRED_DEFINITIONS "${_FLAG}")
+   if("${_FLAG}" STREQUAL "-mfma")
+       # Compiling with FMA3 support may fail only at the assembler level.
+       # In that case we need to have such an instruction in the test code
+       set(_cxx_code "#include <immintrin.h>
+          __m128 foo(__m128 x) { return _mm_fmadd_ps(x, x, x); }
+          int main() { return 0; }")
+   elseif("${_FLAG}" STREQUAL "-std=c++14" OR "${_FLAG}" STREQUAL "-std=c++1y")
+       set(_cxx_code "#include <utility>
+      struct A { friend auto f(); };
+      template <int N> constexpr int var_temp = N;
+      template <std::size_t... I> void foo(std::index_sequence<I...>) {}
+      int main() { foo(std::make_index_sequence<4>()); return 0; }")
+   elseif("${_FLAG}" STREQUAL "-std=c++17" OR "${_FLAG}" STREQUAL "-std=c++1z")
+       set(_cxx_code "#include <functional>
+      int main() { return 0; }")
+   elseif("${_FLAG}" STREQUAL "-stdlib=libc++")
+       # Compiling with libc++ not only requires a compiler that understands it, but also
+       # the libc++ headers itself
+       set(_cxx_code "#include <iostream>
+      #include <cstdio>
+      int main() { return 0; }")
+   elseif("${_FLAG}" STREQUAL "-march=knl"
+          OR "${_FLAG}" STREQUAL "-march=skylake-avx512"
+          OR "${_FLAG}" STREQUAL "/arch:AVX512"
+          OR "${_FLAG}" STREQUAL "/arch:KNL"
+          OR "${_FLAG}" MATCHES "^-mavx512.")
+       # Make sure the intrinsics are there
+       set(_cxx_code "#include <immintrin.h>
+      __m512 foo(__m256 v) {
+        return _mm512_castpd_ps(_mm512_insertf64x4(_mm512_setzero_pd(), _mm256_castps_pd(v), 0x0));
+      }
+      __m512i bar() { return _mm512_setzero_si512(); }
+      int main() { return 0; }")
+   elseif("${_FLAG}" STREQUAL "-mno-sse" OR "${_FLAG}" STREQUAL "-mno-sse2")
+       set(_cxx_code "#include <cstdio>
+      #include <cstdlib>
+      int main() { return std::atof(\"0\"); }")
+   else()
+       set(_cxx_code "#include <cstdio>
+      int main() { return 0; }")
+   endif()
 
    # Normalize locale during test compilation.
    set(_CheckCXXCompilerFlag_LOCALE_VARS LC_ALL LC_MESSAGES LANG)
@@ -47,7 +87,7 @@
      set(ENV{${v}} C)
    endforeach()
    CHECK_COMPILER_FLAG_COMMON_PATTERNS(_CheckCXXCompilerFlag_COMMON_PATTERNS)
-   CHECK_CXX_SOURCE_COMPILES("int main() { return 0; }" ${_RESULT}
+   CHECK_CXX_SOURCE_COMPILES("${_cxx_code}" ${_RESULT}
      # Some compilers do not fail with a bad flag
      FAIL_REGEX "command line option .* is valid for .* but not for C\\\\+\\\\+" # GNU
      ${_CheckCXXCompilerFlag_COMMON_PATTERNS}
